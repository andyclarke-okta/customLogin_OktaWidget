@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@{
    ViewData["Title"] = "Get Token";
}

<script src="https://global.oktacdn.com/okta-signin-widget/@Configuration["OktaSpa:WidgetVersion"]/js/okta-sign-in.min.js" type="text/javascript"></script>
<link href="https://global.oktacdn.com/okta-signin-widget/@Configuration["OktaSpa:WidgetVersion"]/css/okta-sign-in.min.css" type="text/css" rel="stylesheet" />
<h2>Get Tokens</h2>

<div id="okta-login-container"></div>


<script type="text/javascript">
    function sleep(milliseconds) {
      const date = Date.now();
      let currentDate = null;
      do {
        currentDate = Date.now();
      } while (currentDate - date < milliseconds);
    }   

    var myOktaOrg = '@Configuration["OktaSpa:OktaDomain"]';
    var clientId = '@Configuration["OktaSpa:ClientId"]';
    var myIssuer = '@Configuration["OktaSpa:Issuer"]';
    //var redirectUri = '@Configuration["OktaSpa:RedirectUri"]';
    var redirectUri = "@TempData["redirectUri"]";
    //var redirectUri = window.location.origin + '/authorization-code/callback';
    var myHrefLocation = "none";


             var options = {
            baseUrl: myOktaOrg,
            logo: "/img/logo_acme.png",
            features: {
                router: true,
                rememberMe: false,
                smsRecovery: true,
                multiOptionalFactorEnroll: true

             },
             authScheme: 'OAUTH2',
             clientId: clientId,
             redirectUri: redirectUri,
             authParams: {
                issuer: myIssuer,
                 oAuthTimeout: 30000,
                //response mode defaults to fragment when pkce
                responseMode: 'fragment',
                //response type defaults to code when pkce
                responseType: ['id_token', 'token'],
                 //pkce default value is true
                pkce: false,
                scope: [ 'openid', 'email', 'profile'],
             },
            i18n: {
                // Overriding English properties
                'en': {
                    'primaryauth.title': 'Sign in to Acme',
                    'primaryauth.username.placeholder': 'Your Acme Username'
                }
             },
            helpLinks: {
                help: "/Home/Help"
             }
        };
        var oktaSignIn = new OktaSignIn(options);

          function widgetSuccessCallback(res) {
              var key = '';
              if (res[0]) {
                key = Object.keys(res[0])[0];
                  oktaSignIn.authClient.tokenManager.add(key, res[0]);
                  debugger;
              }
              if (res[1]) {
                key = Object.keys(res[1])[0];
                  oktaSignIn.authClient.tokenManager.add(key, res[1]);
                  debugger;
              }
              if (res.status === 'SUCCESS') {
                var token = oktaSignIn.authClient.tokenManager.get(key);
                console.log("Logged in to Okta and issued token:");
                console.log(token);
                console.log("Reload this page to start over.");
                  debugger;

                var temp = res[1].accessToken;
                var sessionAccessTokenField = $("#hiddenAccessTokenField");
                           sessionAccessTokenField.val(temp);
                           var form = sessionAccessTokenField.parent();
                           form.submit();
              }
          }

           function widgetErrorCallback(err) {
               // handleErrors(err);
               console.log("failed to login: %o", err);
                  debugger;
            }


            function showLoginWidget() {
                oktaSignIn.renderEl({el: '#okta-login-container'}, widgetSuccessCallback, widgetErrorCallback);
            }


        function silentGetToken() {
            //get accessToken without prompt
            oktaSignIn.authClient.token.getWithoutPrompt({
                responseType: ['id_token','token'], // or array of types
                state: "getTokenWidget"
            })
            .then(function (res) {
                var key = "accessToken";
                console.log('getToken without prompt success');
                console.log('accessToken 1' + res[1].accessToken);
                //localStorage.token = res[1].accessToken;
                //localStorage.idToken = res[0].idToken;
                oktaSignIn.authClient.tokenManager.add(key, res[1]);
                debugger;
                oktaSignIn.authClient.tokenManager.get(key)
                .then(function(token) {
                  if (token) {
                    // Token is valid
                      debugger;
                    console.log("accessToken 2; " + token.accessToken);
                  } else {
                      debugger; 
                      console.log("Token has expired; ");
                  }
                })
                .catch(function(err) {
                  // OAuth Error
                  console.error('handle OAuthError ' + err);
                });              
            })
            .catch(function (err) {
                console.log('getToken without prompt failure 2');
                debugger;
                // handle OAuthError
            });
        }


            function silentRenewToken() {
                sleep(2000);
                //check stored tokens
                var key = "accessToken";    
                oktaSignIn.authClient.tokenManager.get(key)
                .then(function(token) {
                  if (token) {
                    console.log("Token is valid, accessToken; " + token.accessToken);
                  } else
                  {
                      //in this context this will never be hit
                      // auto renew of expired token when get is set to true in widget
                        console.log("Token has expired; ");
                       debugger; 
                        oktaSignIn.authClient.token.renew(token)
                        .then(function(freshToken) {
                            console.log('manage freshToken' + freshToken);
                            debugger;
                        })
                        .catch(function(err) {
                            console.log('handle OAuthError ' + err);
                        }); 
                  }
                })
                .catch(function(err) {
                  console.error("OAuth Error " + err);
                });
            }

            function silentManageToken() {
                sleep(2000);
                //check stored tokens
                var key = "accessToken";    
                oktaSignIn.authClient.tokenManager.renew(key)
                .then(function(token) {
                  if (token) {
                      debugger;
                    console.log("Renewed accessToken; " + token.accessToken);
                  } 
                })
                .catch(function(err) {
                  console.error("Oauth error " + err);
                });
            }

            debugger;
            //silentGetToken();
            silentRenewToken();
            //silentManageToken();
            


    </script>